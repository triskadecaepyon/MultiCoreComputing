public class Main{
	
    public static void main (String[] args) {
        Counter counter = null;
        MyLock lock;
        long executeTimeMS = 0;
        int numThread = 6;
        int numTotalInc = 1200000;
        
        if (args.length < 3) {
            System.err.println("Provide 3 arguments");
           System.err.println("\t(1) <algorithm>: fast/bakery/synchronized/"
                    + "reentrant");
            System.err.println("\t(2) <numThread>: the number of test thread");
            System.err.println("\t(3) <numTotalInc>: the total number of "
                    + "increment operations performed");
            System.exit(-1);
        }

        if (args[0].equals("fast")) {
            lock = new FastMutexLock(numThread);
            counter = new LockCounter(lock);
        } else if (args[0].equals("bakery")) {
            lock = new BakeryLock(numThread);
            counter = new LockCounter(lock);
        } else if (args[0].equals("synchronized")) {
            counter = new SynchronizedCounter();
        } else if (args[0].equals("reentrant")) {
            counter = new ReentrantCounter();
        } else {
            System.err.println("ERROR: no such algorithm implemented");
            System.exit(-1);
        }

        numThread = Integer.parseInt(args[1]);
        numTotalInc = Integer.parseInt(args[2]);
        
        // TODO
        // Please create numThread threads to increment the counter
        // Each thread executes numTotalInc/numThread increments
        // Please calculate the total execute time in millisecond and store the
        // result in executeTimeMS
        Thread totalThreads[] = new Thread[numThread]; 
        
        long startTime = System.nanoTime();
        // Create and run threads to increment counter.
        for (int i = 0; i < numThread; i++)
        {
        	totalThreads[i] = new ThreadB(i, numThread, numTotalInc, counter);
        	totalThreads[i].start();
        }
        for (int i = 0; i < numThread; i++){
        	try {
				totalThreads[i].join();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
        }
        long endTime = System.nanoTime();
        executeTimeMS = (endTime-startTime)/1000000;
        System.out.println(executeTimeMS);
        // all threads finish incrementing
        // Checking if the result is correct
        System.out.println(counter.getCount());
        if (counter == null ||
            counter.getCount() != (numTotalInc/numThread) * numThread) {
          System.err.println("Error: The counter is not equal to the number "
              + "of total increment");
        } else {
          // print total execute time if the result is correct
          System.out.println(executeTimeMS);
        }
    }
}

class ThreadB extends Thread {
	public volatile int currentThread;
	public volatile int numThread;
	public volatile int numTotalInc;
	public volatile Counter counter;

	public ThreadB(int currentThread, int numThread, int numTotalInc, Counter counter) {
		this.currentThread = currentThread;
		this.numThread = numThread;
		this.numTotalInc = numTotalInc;
		this.counter = counter;
	}
	
	public long getId()
	{
		return currentThread;
	}
	
	public void run() {
		int IncPerThread = numTotalInc/numThread;
		for (int i = 0; i < IncPerThread; i++){
			counter.increment();
		}
	}
}